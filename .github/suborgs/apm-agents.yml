# This settings can be used to create suborg level settings

# List of repos that belong to the suborg
suborgrepos:
  - apm-agents*
# You can use Glob patterns

suborgteams:
  - core

#repository:
  # This is the settings that need to be applied to all repositories in the org
  # See https://developer.github.com/v3/repos/#edit for all available settings for a repository
  # A short description of the repository that will show up on GitHub
  #description: description of the repo

  # A URL with more information about the repository
  #homepage: https://example.github.io/

  # Keep this as true for most cases
  # A lot of the policies below cannot be implemented on bare repos
  # Pass true to create an initial commit with empty README.
  #auto_init: true

  # A comma-separated list of topics to set on the repository
  #topics:
  #- github
  #- safe-settings
  #- new-topic
  #- another-topic
  #- topic-12

  # Either `true` to make the repository private, or `false` to make it public.
  # If this value is changed and if Org members cannot change the visibility of repos
  # it would result in an error when updating a repo
  #private: false

  # Can be public or private. If your organization is associated with an enterprise account using
  # GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be internal.
  #visibility: private

  # Either `true` to enable issues for this repository, `false` to disable them.
  #has_issues: true

  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  #has_projects: true

  # Either `true` to enable the wiki for this repository, `false` to disable it.
  #has_wiki: true

  # The default branch for this repository.
  #default_branch: main

  # Desired language or platform [.gitignore template](https://github.com/github/gitignore)
  # to apply. Use the name of the template without the extension.
  # For example, "Haskell".
  #gitignore_template: node

  # Choose an [open source license template](https://choosealicense.com/)
  # that best suits your needs, and then use the
  # [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type)
  # as the `license_template` string. For example, "mit" or "mpl-2.0".
  #license_template: mit

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  #allow_squash_merge: true

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  #allow_merge_commit: true

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  #allow_rebase_merge: true

  # Either `true` to allow auto-merge on pull requests,
  # or `false` to disallow auto-merge.
  # Default: `false`
  #allow_auto_merge: true

  # Either `true` to allow automatically deleting head branches
  # when pull requests are merged, or `false` to prevent automatic deletion.
  # Default: `false`
  #delete_branch_on_merge: true

# The following attributes are applied to any repo within the org
# So if a repo is not listed above is created or edited
# The app will apply the following settings to it
labels:
  # Labels: define labels for Issues and Pull Requests
  include:
    - name: bug
      color: CC0000
      description: An issue with the system

    - name: feature
      color: '#336699'
      description: New functionality.

    - name: first-timers-only
      # include the old name to rename an existing label
      oldname: Help Wanted
      color: '#326699'

    - name: new-label
      # include the old name to rename an existing label
      oldname: Help Wanted
      color: '#326699'
  exclude:
    # don't delete any labels created on GitHub that starts with "backp"
    - name: ^backp*

#collaborators:
# Collaborators: give specific users access to any repository.
# See https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator for available options

#- username: drstrange
#  permission: push
# The permission to grant the collaborator. Can be one of:
# * `pull` - can pull, but not push to or administer this repository.
# * `push` - can pull and push, but not administer this repository.
# * `admin` - can pull, push and administer this repository.
#- username: beetlejuice
#  permission: pull
#  exclude:
#  - actions-demo
# You can exclude a list of repos for this collaborator and all repos except these repos would have this collaborator
#- username: thor
#  permission: push
#  include:
#  - actions-demo
#  - another-repo
# You can include a list of repos for this collaborator and only those repos would have this collaborator

# See https://developer.github.com/v3/teams/#add-or-update-team-repository for available options
teams:
 - name: core
   permission: admin

branches:
  If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo
 - name: default
   protection:
     required_pull_request_reviews:
       required_approving_review_count: 1
       dismiss_stale_reviews: true
       require_code_owner_reviews: true
       require_last_push_approval: true
       bypass_pull_request_allowances:
         apps: []
         users: []
         teams: []
       dismissal_restrictions:
         users: []
         teams: []
     required_status_checks:
       strict: true
       contexts: []
     enforce_admins: true
     restrictions:
       apps: []
       users: []
       teams: []

validator:
  pattern: '[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+.*'
